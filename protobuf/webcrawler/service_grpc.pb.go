// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package webcrawler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebCrawlerServiceClient is the client API for WebCrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebCrawlerServiceClient interface {
	Crawl(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*Empty, error)
	CrawlBatch(ctx context.Context, in *BatchCrawlerRequest, opts ...grpc.CallOption) (*Empty, error)
}

type webCrawlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebCrawlerServiceClient(cc grpc.ClientConnInterface) WebCrawlerServiceClient {
	return &webCrawlerServiceClient{cc}
}

func (c *webCrawlerServiceClient) Crawl(ctx context.Context, in *CrawlerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/webcrawler.webCrawlerService/Crawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCrawlerServiceClient) CrawlBatch(ctx context.Context, in *BatchCrawlerRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/webcrawler.webCrawlerService/CrawlBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebCrawlerServiceServer is the server API for WebCrawlerService service.
// All implementations must embed UnimplementedWebCrawlerServiceServer
// for forward compatibility
type WebCrawlerServiceServer interface {
	Crawl(context.Context, *CrawlerRequest) (*Empty, error)
	CrawlBatch(context.Context, *BatchCrawlerRequest) (*Empty, error)
	mustEmbedUnimplementedWebCrawlerServiceServer()
}

// UnimplementedWebCrawlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebCrawlerServiceServer struct {
}

func (UnimplementedWebCrawlerServiceServer) Crawl(context.Context, *CrawlerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}
func (UnimplementedWebCrawlerServiceServer) CrawlBatch(context.Context, *BatchCrawlerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlBatch not implemented")
}
func (UnimplementedWebCrawlerServiceServer) mustEmbedUnimplementedWebCrawlerServiceServer() {}

// UnsafeWebCrawlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebCrawlerServiceServer will
// result in compilation errors.
type UnsafeWebCrawlerServiceServer interface {
	mustEmbedUnimplementedWebCrawlerServiceServer()
}

func RegisterWebCrawlerServiceServer(s grpc.ServiceRegistrar, srv WebCrawlerServiceServer) {
	s.RegisterService(&WebCrawlerService_ServiceDesc, srv)
}

func _WebCrawlerService_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServiceServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcrawler.webCrawlerService/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServiceServer).Crawl(ctx, req.(*CrawlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCrawlerService_CrawlBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCrawlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServiceServer).CrawlBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcrawler.webCrawlerService/CrawlBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServiceServer).CrawlBatch(ctx, req.(*BatchCrawlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebCrawlerService_ServiceDesc is the grpc.ServiceDesc for WebCrawlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebCrawlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webcrawler.webCrawlerService",
	HandlerType: (*WebCrawlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _WebCrawlerService_Crawl_Handler,
		},
		{
			MethodName: "CrawlBatch",
			Handler:    _WebCrawlerService_CrawlBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webcrawler/service.proto",
}
